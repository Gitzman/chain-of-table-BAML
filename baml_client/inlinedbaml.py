###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "GroupColumn.baml": "// This is a BAML file for the group_column function\n// https://docs.boundaryml.com\n\nclass GroupColumnResult {\n  explanation string @description(\"Explanation for why this column was chosen\")\n  group_column string @description(\"The column to group by\")\n\n}\n\nfunction GroupColumn(table_text: string, statement: string, columns: string[]) -> GroupColumnResult {\n  client GPT4o\n  prompt #\"\n    {{ _.role(\"user\") }}\n    To tell if the statement is true or false, we can first use f_group() to group the values in a column.\n\n    /*\n    col : rank | lane | athlete | time | country\n    row 1 : 1 | 6 | manjeet kaur (ind) | 52.17 | ind\n    row 2 : 2 | 5 | olga tereshkova (kaz) | 51.86 | kaz\n    row 3 : 3 | 4 | pinki pramanik (ind) | 53.06 | ind\n    row 4 : 4 | 1 | tang xiaoyin (chn) | 53.66 | chn\n    row 5 : 5 | 8 | marina maslyonko (kaz) | 53.99 | kaz\n    */\n    Statement: there are one athlete from japan.\n    The existing columns are: rank, lane, athlete, time, country.\n    {explanation: the statement says the number of athletes from japan is one. Each row is about an athlete. We can group column \"country\" to group the athletes from the same country.\n    Therefore, the answer is: f_group(country).,\n    group_column: country}\n\n    /*\n    col : district | name | party | residence | first served\n    row 1 : district 1 | nelson albano | dem | vineland | 2006\n    row 2 : district 1 | robert andrzejczak | dem | middle twp. | 2013â€ \n    row 3 : district 2 | john f. amodeo | rep | margate | 2008\n    row 4 : district 2 | chris a. brown | rep | ventnor | 2012\n    row 5 : district 3 | john j. burzichelli | dem | paulsboro | 2002\n    */\n    Statement: the number of districts that are democratic is 5.\n    The existing columns are: district, name, party, residence, first served.\n    {explanation: the statement says the number of districts that are democratic is 5. Each row is about a district. We can group the column \"party\" to group the districts from the same party.\n    Therefore, the answer is: f_group(party).,\n    group_column: party\n    }\n\n    Now, please analyze the following table and statement:\n\n    /*\n    {{ table_text }}\n    */\n    Statement: {{ statement }}\n    The existing columns are: {{ columns }}.\n\n    Provide step by step \n\n    {{ ctx.output_format }}\n\n        Before you output the JSON, please explain your\n    reasoning step-by-step. Here is an example on how to do this:\n    'If we think step by step we can see that ...\n     therefore the output JSON is:\n    {\n      ... the json schema ...\n    }'\n  \"#\n}\n\ntest GroupColumnTest {\n  functions [GroupColumn]\n  args {\n    table_text #\"\n        col : game | date | opponent | result | wildcats points | opponents | record\n        row 1 : 1 | sept 20 | ole miss | loss | 7 | 14 | 0 - 1\n        row 2 : 2 | sept 27 | cincinnati | win | 20 | 0 | 1 - 1\n        row 3 : 3 | oct 4 | xavier | win | 20 | 7 | 2 - 1\n        row 4 : 4 | oct 11 | 9 georgia | win | 26 | 0 | 3 - 1 , 20\n        row 5 : 5 | oct 18 | 10 vanderbilt | win | 14 | 0 | 4 - 1 , 14\n        row 6 : 6 | oct 25 | michigan state | win | 7 | 6 | 5 - 1 , 13\n        row 7 : 7 | nov 1 | 18 alabama | loss | 0 | 13 | 5 - 2\n        row 8 : 8 | nov 8 | west virginia | win | 15 | 6 | 6 - 2\n        row 9 : 9 | nov 15 | evansville | win | 36 | 0 | 7 - 2\n        row 10 : 10 | nov 22 | tennessee | loss | 6 | 13 | 7 - 3\n    \"#\n    columns [\"game\", \"date\", \"opponent\", \"result\", \"wildcats points\", \"opponents\", \"record\"]\n    statement \"the wildcats kept the opposing team scoreless in four games\"\n  }\n}",
    "clients.baml": "// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\n\nclient<llm> GPT4o {\n  provider openai\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Claude {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastAnthropic {\n  provider anthropic\n  options {\n    model \"claude-3-haiku-20240307\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n\nclient<llm> FastOpenAI {\n  provider openai\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> Fast {\n  provider round-robin\n  options {\n    // This will alternate between the two clients\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/round-robin\n    strategy [FastAnthropic, FastOpenAI]\n  }\n}\n\nclient<llm> Openai {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    // Learn more at https://docs.boundaryml.com/docs/snippets/clients/fallback\n    strategy [GPT4, FastOpenAI]\n  }\n}",
    "generators.baml": "\n// This helps use auto generate libraries you can use in the language of\n// your choice. You can have multiple generators if you use multiple languages.\n// Just ensure that the output_dir is different for each generator.\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\n    // The BAML VSCode extension version should also match this version.\n    version \"0.54.0\"\n    // Valid values: \"sync\", \"async\"\n    // This controls what `b.FunctionName()` will be (sync or async).\n    // Regardless of this setting, you can always explicitly call either of the following:\n    // - b.sync.FunctionName()\n    // - b.async_.FunctionName() (note the underscore to avoid a keyword conflict)\n    default_client_mode sync\n}",
}

def get_baml_files():
    return file_map