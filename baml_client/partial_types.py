###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, List, Optional, Union

from . import types

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################


class FinalQueryResult(BaseModel):
    
    
    explanation: Optional[str] = None
    answer: Optional[types.Answers] = None

class FunctionDemo(BaseModel):
    
    
    op: Optional[str] = None
    demo: Optional[str] = None

class GroupColumnResult(BaseModel):
    
    
    explanation: Optional[str] = None
    group_column: Optional[str] = None

class PlannerResult(BaseModel):
    
    
    explanation: Optional[str] = None
    operationchain: List[Optional[Union[types.Operation, str]]]

class SelectColumnResult(BaseModel):
    
    
    explanation: Optional[str] = None
    select_columns: List[Optional[Union[types.Columns, str]]]

class SelectRowResult(BaseModel):
    
    
    explanation: Optional[str] = None
    select_rows: List[Optional[int]]

class SortColumnResult(BaseModel):
    
    
    sort_column: Optional[str] = None
    sort_order: Optional[types.SortOrderEnum] = None
    data_type: Optional[types.DataTypeEnum] = None
    explanation: Optional[str] = None
